<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>生活、學習紀錄</title>
    <link>https://jyunyi-lin.github.io/</link>
    <description>Recent content on 生活、學習紀錄</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Thu, 29 Aug 2024 16:21:26 +0800</lastBuildDate>
    <atom:link href="https://jyunyi-lin.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>利用 Storybook 和 Jest 打造可靠的前端測試方案</title>
      <link>https://jyunyi-lin.github.io/posts/2024/08/%E5%88%A9%E7%94%A8-storybook-%E5%92%8C-jest-%E6%89%93%E9%80%A0%E5%8F%AF%E9%9D%A0%E7%9A%84%E5%89%8D%E7%AB%AF%E6%B8%AC%E8%A9%A6%E6%96%B9%E6%A1%88/</link>
      <pubDate>Thu, 29 Aug 2024 16:21:26 +0800</pubDate>
      <guid>https://jyunyi-lin.github.io/posts/2024/08/%E5%88%A9%E7%94%A8-storybook-%E5%92%8C-jest-%E6%89%93%E9%80%A0%E5%8F%AF%E9%9D%A0%E7%9A%84%E5%89%8D%E7%AB%AF%E6%B8%AC%E8%A9%A6%E6%96%B9%E6%A1%88/</guid>
      <description>在現代前端開發中，我們經常會面對這樣的挑戰：如何確保我們的 UI 元件在不同的使用場景下都能穩定運作？如何在不斷變化的需求中保持程式碼的高品質？這些問題通常讓開發者頭痛不已。然而，當我們將 Storybook 與 Jest 結合起來使用時，這些挑戰便能迎刃而解。&#xA;什麼是 Storybook？ Storybook 是一個 UI 開發工具，能夠讓我們在獨立的開發環境中構建並測試 UI 元件。我們可以為每個元件建立「故事」（stories），這些「故事」展示了元件在不同狀態下的樣子。例如，一個按鈕元件可以在正常、懸停、禁用等狀態下呈現。這不僅方便我們開發，也讓設計師和 PM 可以直觀地看到元件的效果。&#xA;什麼是 Jest？ Jest 是一個強大的 JavaScript 測試框架，它簡單易用，支援斷言、模擬、非同步測試等功能。透過 Jest，我們可以撰寫單元測試和整合測試來確保程式碼的正確性。此外，Jest 還具備快照測試（Snapshot Testing）的功能，可以自動生成元件的快照並檢查變更。&#xA;Storybook 與 Jest 的完美結合 當我們將 Storybook 與 Jest 結合使用時，便能實現一個強大的測試方案。具體來說，我們可以利用 Storybook 的 stories 作為 Jest 測試的基礎，這樣可以保證所有的 UI 元件都被全面測試到。&#xA;步驟 1：設定 Storybook 和 Jest 首先，我們需要在專案中安裝並設定 Storybook 和 Jest。這可以透過以下命令來完成：&#xA;npx sb init npm install --save-dev jest babel-jest @testing-library/react @testing-library/jest-dom 接著，在 package.json 中配置 Jest：&#xA;&amp;#34;scripts&amp;#34;: { &amp;#34;test&amp;#34;: &amp;#34;jest&amp;#34; }, &amp;#34;jest&amp;#34;: { &amp;#34;setupFilesAfterEnv&amp;#34;: [&amp;#34;@testing-library/jest-dom/extend-expect&amp;#34;], &amp;#34;testEnvironment&amp;#34;: &amp;#34;jsdom&amp;#34; } 步驟 2：建立 Storybook 的 Stories 假設我們有一個 Button 元件，我們可以在 Button.</description>
    </item>
    <item>
      <title>前端開發者的 GA 基礎知識入門</title>
      <link>https://jyunyi-lin.github.io/posts/2024/08/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC%E8%80%85%E7%9A%84-ga-%E5%9F%BA%E7%A4%8E%E7%9F%A5%E8%AD%98%E5%85%A5%E9%96%80/</link>
      <pubDate>Sat, 24 Aug 2024 21:59:52 +0800</pubDate>
      <guid>https://jyunyi-lin.github.io/posts/2024/08/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC%E8%80%85%E7%9A%84-ga-%E5%9F%BA%E7%A4%8E%E7%9F%A5%E8%AD%98%E5%85%A5%E9%96%80/</guid>
      <description>前言 在開發專案時，客戶經常會要求進行網站數據分析，像是頁面瀏覽排行、取消訂閱次數、文件下載排名、站內搜尋關鍵字統計等。團隊在討論後，選擇了 Google Analytics (GA) 作為分析工具，此時 PM 通常會尋求開發者的協助來決定哪些數據需要前端的配合、需要進行哪些設定以及如何在程式碼中埋設追蹤事件。&#xA;假設我們是第一次接觸 GA，可能會開始尋找相關資料，瞭解 GA 的設置流程、如何設定以滿足客戶需求。然而，大部分資料都是介紹 GA 後台的使用或數據分析技巧，從開發者角度出發的指南相對稀少。要從大量資料中找到合適的內容並不容易，尤其是在專案中需要快速作出決策時。&#xA;因此，這篇文章將從前端開發者的角度，介紹 GA 的基本概念，並不會過多介紹 GA 的詳細功能，而是提供一個大方向，幫助前端工程師瞭解如何在 GA 的框架下進行有效的協作，使專案更為出色。&#xA;備註：本文的範例皆基於 GA4 版本。&#xA;在認識 GA 之前，先理解資料分析的基本概念 GA 的功能相當豐富，剛接觸 GA 時，看到大量的圖表和資料，可能會讓人感到困惑：應該從哪裡開始？哪些部分是前端要處理的？哪些是其他人要處理的？如果要嵌入程式碼，應該怎麼做？這些問題的答案在哪裡找到？在搞清楚這些問題前，我們應該先暫時擱置 GA，回到資料分析的基本概念上。&#xA;在日常生活中，我們經常接觸到資料統計，比如投票就是一種資料搜集，記帳也是資料搜集。撇除網站和程式的結構，如果我們想進行資料統計，會如何做？可能會用紙筆記錄，或是使用記帳本，甚至使用方便的軟體工具。&#xA;簡單來說，資料統計可以拆解成兩個步驟：搜集資料 和 分析資料。每次使用者的行為會觸發一筆記錄，而這些記錄最終會被處理和分析。從這個角度來看，GA 的運作也離不開這兩件事，分別是 搜集事件 和 分析資料。&#xA;從程式角度思考 GA 的運作方式 如果你寫過 React，並使用過 Redux 進行狀態管理，那麼應該會對 dispatch 和 reducer 不陌生。dispatch 發送 action 後，reducer 接收到 action，並依據 action 對 state 進行變更。&#xA;GA 的運作與此類似。GA 中每次資料的搜集都被稱為一次 事件 (event)，而這些事件透過 GA 的 API 發送到 GA 後台進行處理。GA 的 API 結構與 Redux 的 action 相似，我們知道 action 會有 action type 和 action payload，事件 (event) 也會有 event name 和 payload。</description>
    </item>
    <item>
      <title>初探 Google Maps API</title>
      <link>https://jyunyi-lin.github.io/posts/2024/01/%E5%88%9D%E6%8E%A2-google-maps-api/</link>
      <pubDate>Sat, 06 Jan 2024 17:44:01 +0800</pubDate>
      <guid>https://jyunyi-lin.github.io/posts/2024/01/%E5%88%9D%E6%8E%A2-google-maps-api/</guid>
      <description>當專案需要用到地圖時，應該首選都是 Google Map 提供的 API 服務。本文會先從 API 的介紹開始，慢慢進入如何應用到專案，接著詳細介紹在專案中使用到的 API，最後以一個概論作結。&#xA;Google Maps JavaScript API V3 介紹 因應不同的需求，主要可以分成七大類 API：&#xA;API 說明 範例 ❶Maps 顧名思義就是呼喚出那張地圖時所要使用的。自訂地圖樣式等。 ❷Drawing on the map 想在地圖上顯示出指定地點的 Marker 或甚至點擊 Marker 後要跳出一個 Info Window 嗎？內容都在這裡。 ❸Street View 街景服務 略 ❹Places 取得地點詳細資訊、經緯度變換地點都得用這組 API，也是本次會重點介紹的項目！ 詳見文章以下介紹 ❺Routes 導航路線相關。 略 ❻Local Context (beta) Local Context 將地圖、路徑規劃、地點 (Maps, Routes, Places) 功能，透過一支 API 全部整合，一次提供 3 種功能，似乎很讚，但還在 beta 中。 略 ❼Journey Sharing (beta) 顧名思義就是呼喚出那張地圖時所要使用的。自訂地圖樣式等。 略 在之前接觸的專案中，主要使用的主要是 ❶、❷，也就是使用 Google 地圖，並把相關店家的資訊（例如車咕嚕中洗車場地點）放置 Marker 在地圖上，點擊後會跳出店家詳細資訊及預約的 Info Window。 而本文主要想著重介紹的是 ❹，也是最近偉士牌需求中的購車頁優化，會需要依照使用者的 input 去移動到對應的城市，並顯示城市的名稱，其實就是模擬 Google Map 的搜尋功能，但實際做起來需要熟悉 API 的混用。</description>
    </item>
    <item>
      <title>簡單的開發 Git Flow</title>
      <link>https://jyunyi-lin.github.io/posts/2022/04/%E7%B0%A1%E5%96%AE%E7%9A%84%E9%96%8B%E7%99%BC-git-flow/</link>
      <pubDate>Sat, 16 Apr 2022 10:57:55 +0800</pubDate>
      <guid>https://jyunyi-lin.github.io/posts/2022/04/%E7%B0%A1%E5%96%AE%E7%9A%84%E9%96%8B%E7%99%BC-git-flow/</guid>
      <description>簡單的開發 Git Flow 不知道有沒有人遇到過做好的 feature A、B、C 都依序上了測試機，PM 卻說只要把 feature C 先上正式機的情況，這時候如果你的開發分支沒有管理好的話，就會非常 🥺&#xA;只有兩條主線 一般來說專案都會有正式跟測試環境，比較常見會分由 master &amp;amp; demo 等等分支來做開發。&#xA;假設你的 feature 或 issue 分支都是從 demo 開出來的，做完後又直接 merge 回 demo，那就有極大的機會遇到上面的窘境。&#xA;轉換 Base Branch 當然，你可以直接從 master 開 feature 分支來解決這個問題。&#xA;或在比較大型的專案，也可以多一個分支 staging 來當作開 branch 的 base，另外跟 PM 爭取多開一個上正式機前的測試環境，方便我們或 PM 測試每次上版的內容。&#xA;Branch 通常可以由以下幾個主要的 branch 來做版本控管。&#xA;master / production：正式環境：正式發佈出去的版本。 staging / stage：上正式機前的測試環境：可以把它當作開分支的基底，基本上內容要跟 master 的內容保持一致。 demo / develop：測試環境：會包含最多的功能開發以及 bug 修復。 不同的專案，可能還會有 pre-prod 等等更多的分支&#xA;開發流程 1. 當 issue 被 assign 過來</description>
    </item>
    <item>
      <title>Core Web Vitals</title>
      <link>https://jyunyi-lin.github.io/posts/2022/04/core-web-vitals/</link>
      <pubDate>Thu, 07 Apr 2022 09:19:33 +0800</pubDate>
      <guid>https://jyunyi-lin.github.io/posts/2022/04/core-web-vitals/</guid>
      <description>網站體驗核心指標： LCP、FID、CLS，優化使用者體驗&#xA;使用者體驗 (User Experience) 使用者體驗，或 UX(User Experience)，即「任何產品、生活形式經過人為的設計後，使用上感受到的體驗」因此 UX 無所不在。從我們使用的浴廁設施、家具、到你喝的早餐店奶茶、滑的手機都是經過設計而成。&#xA;用戶體驗的設計師關心產品「何時」被使用，「如何」吸引人購買，以及購買後「如何」被使用。延伸到網站上，理所當然網站的載入速度、介面美觀、實用性、是否符合用戶的需求、用戶是否想再回訪，因此也與行銷、設計、工程和 SEO 息息相關。&#xA;網站體驗核心指標（Core Web Vitals） 2020 年 5 月 28 日， Google 在官方部落格中針對使用者體驗推出了新的 3 項 Core web vitals。用來測量訪客在頁面的瀏覽體驗狀況。每項指標皆代表使用者體驗不同的面相，並反映出以使用者為中心的真實體驗。&#xA;良好 需要改善 低落 LCP ≤2500ms &amp;gt;4000ms 75 FID ≤100ms &amp;gt;300ms 75 CLS ≤0.1 &amp;gt;0.25 75 每個核心指標的檢查結果都有良好、需要改善、不良三個區間&#xA;LCP (Largest Contentful Paint) — 顯示最大內容元素所需時間 [速度指標] LCP 注重於頁面中最大元素的載入速度，簡言之就是網頁從開始等待畫面載入，直到主要畫面載入完成，Google 建議於開始載入網頁的 2.5 秒內完成 LCP。&#xA;LCP 會偵測那些項目？ &amp;lt;img&amp;gt; elements 包在 &amp;lt;svg&amp;gt; element 裡面的 &amp;lt;image&amp;gt; elements &amp;lt;video&amp;gt; elements 透過 url() 的 CSS 功能 載入 background-image 的 element 包含 text node 或是 inline-level text elements children 的 block-level element LCP 該如何進行優化？ 通常 LCP 可以針對以下 4 大點來進行優化</description>
    </item>
    <item>
      <title>Vue.js 學習筆記 - 3</title>
      <link>https://jyunyi-lin.github.io/posts/2021/04/vue.js-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-3/</link>
      <pubDate>Mon, 19 Apr 2021 15:44:43 +0800</pubDate>
      <guid>https://jyunyi-lin.github.io/posts/2021/04/vue.js-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-3/</guid>
      <description>今天想來聊聊 Vue Router。&#xA;Vue Router 是由前端實作的路由，有了它，就可以透過前端操控路由，打造一個前端 SPA*。在過往路由需要先經過網路（Internet），並透過後端伺服器，進行請求與回應的動作，才能顯示路由指定的頁面，但是透過 Vue Router，就不一定需要網路與後端，也能渲染這個路由指定的頁面。&#xA;SPA 為 Single-page Application 的簡寫。指的是「不跳頁」的網頁設計原則，例如著名的 Gmail。所以你在用 Gmail 的時候，會感覺好像「在用一個 App」而不是在用「網頁」，因為頁面之間跳轉的很流暢，而不像一般網站一樣在操作過程需要不斷重整頁面。&#xA;使用 Vue Router 時，當我們想變更路由，會經過以下的步驟：&#xA;啟動 Vue Router 藉由 JavaScript 動態更改網址 載入對應的 component 渲染顯示頁面 但是當需要使用到資料的增刪改查（CRUD）的動作時，就需要進一步透過網路，向後端伺服器發送請求(也就是串接後端 API)&#xA;如何開始用 Vue Router？ 當你已經開了一個 vue 專案後，可以透過以下指令安裝 Vue Router。&#xA;vue add router&#xA;在安裝的過程中，會出現是否選擇 History Mode 的選項。 若選擇否，則會套用 Hash Mode。這兩種模式的差異，等等會詳細說明，建議先選擇 Hash Mode。&#xA;安裝好之後，來觀察看看專案下哪邊變得不同了。&#xA;網址多了 # 符號，此處與設定 Hash Mode 有關，詳看頁尾解釋。 網頁最上方多了可以切換路由的導覽列 專案多了 router（使用裡面的 index.js 檔案來設定路由）、views（擺放可以被 index.js 使用的頁面元件。通常一個路由會對應到一個 views 裡面的 component）的資料夾。 如何設定路由？ 讓我們從 router 資料夾裡面的 index.</description>
    </item>
    <item>
      <title>reduce() 是什麼？該如何使用？</title>
      <link>https://jyunyi-lin.github.io/posts/2021/04/reduce-%E6%98%AF%E4%BB%80%E9%BA%BC%E8%A9%B2%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 07 Apr 2021 15:21:50 +0800</pubDate>
      <guid>https://jyunyi-lin.github.io/posts/2021/04/reduce-%E6%98%AF%E4%BB%80%E9%BA%BC%E8%A9%B2%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8/</guid>
      <description>昨天在面試時突然被問到有沒有使用過 reduce，一時之間腦內跑馬燈走過，有聽過這個字但好像沒有實際使用過，於是模稜兩可的給了一個很爛的回答，讓人後悔至極，應該大方承認自己沒有相關使用經驗，至少還比較有臺階可下。不過也因為如此，讓我發現自己對這個陣列的操作方法還不熟，趕緊來補強一下。&#xA;Array.prototype.reduce() 根據 MDN 的說明，reduce 方法將一個累加器及陣列中每項元素（由左至右）傳入回呼函式，將陣列化為單一值。其實這個描述挺寫實的，不過我們搭配實作來看會更清楚。&#xA;Syntax array.reduce(function(accumulator, currentValue, currentIndex, array),initialValue) 其中有 4 個參數，分別代表不同的意思。&#xA;accumulator：累加總計 currentValue：目前值 currentIndex（optional）：這一輪迭代的索引（index） array（optional）：陣列內容 而 initialValue 則是代表第一次要傳入的初始值。&#xA;實例 1 const array = [1, 3, 4, 5] const arrayReduced = array.reduce((accumulator, currentValue) =&amp;gt; { return accumulator + currentValue }, 5) //初始值為 5 console.log(arrayReduced) // 18 No accumulator currentValue currentIndex return value 1 5 1 0 6 2 6 3 1 9 3 9 4 2 13 4 13 5 3 18 可以發現當我們的初始值是 5 的時候，accumulator 就是從 5 開始計算，後面接續 currentValue 的值累計。</description>
    </item>
    <item>
      <title>ALPHA Camp 畢業心得</title>
      <link>https://jyunyi-lin.github.io/posts/2021/04/alpha-camp-%E7%95%A2%E6%A5%AD%E5%BF%83%E5%BE%97/</link>
      <pubDate>Thu, 01 Apr 2021 15:29:24 +0800</pubDate>
      <guid>https://jyunyi-lin.github.io/posts/2021/04/alpha-camp-%E7%95%A2%E6%A5%AD%E5%BF%83%E5%BE%97/</guid>
      <description>從 2020 年 9 月一直到現在，整整半年的時間，終於是寫畢業部落格的時機了。還記得剛開始接觸 JavaScript 時笨拙得連函式都搞不太清楚，物件跟陣列分不出個所以然的自己。一路走來真是有種浴火重生，現在才要開始的感慨。完全沒有後悔過這個選擇，因為不論上完課程後是否要轉職，過程中所得到的收穫是比這個結果還要更重要、更能影響我的。&#xA;還記得一開始寫 AC 要求的技術文章時，覺得有點麻煩之外，又想說怎麼會有人來看呢，滿心都是一個想逃避的態度。後來寫著寫著不知為何就啟動某個開關，其實根本不需要真的有人來閱讀，只要我還有在讀自己的文章，這些被記錄下的事就是有價值的。現在很感謝 AC 的這種作業形式，讓我更能反覆的反省、思考不足之處。&#xA;我想大略談談每個學期的感受，雖然之前已經有兩篇學期心得文，還是不厭煩的來總結一下。&#xA;2-1 剛開始接觸 JavaScript，即使稍微有點 HTML，CSS 的觀念，還是很難應付這個全新的東西。好像在新手村還沒辦法轉職的初心者，只能默默打怪，然後等待出頭天的時候來臨。&#xA;2-2 終於可以轉職了，進入前端世界，學習新技能：DOM 與 Ajax。學了新技能後好像發現新世界，自己居然可以靠著簡單的語法完成一個簡單的社群名單還有翻牌遊戲，讓人大開眼界。&#xA;2-3 由淺入深的後端世界。這時已經可以自己單打獨鬥，但還是會因為一時的疏忽而跑出墓碑。最讓人有成就感的就是終於可以把自己的作品跟別人分享了，部署技能 get。還學了一些護身法術，像是 git 之類的。&#xA;3 巫師的磨練。這關是要與同伴並肩作戰打敗 Simple Twitter 魔王的。俗話說的好，三個臭皮匠，勝過一個諸葛亮。在組隊加持下，即使途中遭遇無數次困難，也都能扭轉乾坤，順利過關。&#xA;大概就是這樣的感覺了。學期三作為最後一個學期，其內容之縝密、任務之精實。任務結束後的各種反思主題讓人印象深刻，就是透過這樣不斷地內化，才能打造更堅強不可摧的心靈。做好一件事，不只是表面上看起來完成，裡面也要結實纍纍，這樣才禁得起未來的困難。這是對我來說感受最深的一課。&#xA;即使課程告一段落了，但人生的旅程才正要開始，繼續學習新技能，穩扎穩打，目標不是有一天能單挑大魔王，而是能與一群夥伴一起走過一個充實的人生。</description>
    </item>
    <item>
      <title>Vue.js 學習筆記 - 2</title>
      <link>https://jyunyi-lin.github.io/posts/2021/04/vue.js-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-2/</link>
      <pubDate>Thu, 01 Apr 2021 14:37:32 +0800</pubDate>
      <guid>https://jyunyi-lin.github.io/posts/2021/04/vue.js-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-2/</guid>
      <description>這次跟著複習的腳步，再來看看 Vue 常用的指令吧！如果是第一次來的朋友，歡迎先去看看第一篇簡介 Vue 框架的文章喔。&#xA;常用指令 v-on 事件監聽 使用 DOM API 監聽事件的時候，會需要先把要觸發事件的節點設定出來，再用 addEventListener() 來做監聽。在 Vue 裡面只需要將 v-on 寫在想觸發事件的 HTML 標籤上，就可以進行事件監聽。&#xA;使用方法為：v-on:事件動作=&amp;quot;事件動作執行後要用的 method&amp;quot; 可以簡寫為：@事件動作=&amp;quot;事件動作執行後要用的 method&amp;quot;&#xA;假設我們想在點擊按鈕後觸發瀏覽器提醒，可以這樣寫：&#xA;&amp;lt;button v-on:click=&amp;#34;alertAfterClick&amp;#34;&amp;gt;點擊按鈕&amp;lt;/button&amp;gt; 或者使用簡寫：&#xA;&amp;lt;button @click=&amp;#34;alertAfterClick&amp;#34;&amp;gt;點擊按鈕&amp;lt;/button&amp;gt; 觸發事件後會執行的方法寫在 method 裡面：&#xA;methods: { alertAfterClick () { window.alert(&amp;#39;點擊到按鈕了&amp;#39;) } } 如此一來視窗就會順利出現相對應得 Alert 囉！&#xA;v-bind 想增加 HTML 屬性值或把父元件的資料帶入子元件時就可以使用 v-bind。&#xA;使用方法為：v-bind: 屬性名稱或要被使用之資料現在使用時要用的名稱=&amp;quot;屬性值(主要會用 true 和 false 操控)或資料名稱&amp;quot; 可以簡寫為：:屬性名稱或要被使用之資料現在使用時要用的名稱=&amp;quot;屬性值(主要會用 true 和 false 操控)或資料名稱&amp;quot;&#xA;直接來看看例子吧，我們將 img 標籤綁定了使用者的 ID 與大頭貼照片：&#xA;&amp;lt;img v-bind:src=&amp;#34;user.avatar&amp;#34; v-bind:data-id=&amp;#34;user.id&amp;#34; &amp;gt; 或者使用簡寫：</description>
    </item>
    <item>
      <title>Vue.js 學習筆記 - 1</title>
      <link>https://jyunyi-lin.github.io/posts/2021/03/vue.js-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-1/</link>
      <pubDate>Wed, 31 Mar 2021 09:58:16 +0800</pubDate>
      <guid>https://jyunyi-lin.github.io/posts/2021/03/vue.js-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-1/</guid>
      <description>學了 Vue 也已經一段時間，實作了餐廳論壇與簡易的社交平台後，發現還有許多陌生的地方。趁著記憶還猶新，一邊複習，一邊把知識補足起來。對 Vue 有興趣的人也可以跟著複習的腳步，稍微認識一下這個框架是什麼、如何使用。前情提要：由於是複習文章，可能不會有太詳細的教學，如果讀了之後發現還未懂透的話，建議可以搭配 Vue 官方文件來服用，效果更佳。&#xA;Vue 是什麼？ Vue 是一個前端框架。隨著這幾年前後端分離，前端框架如雨後春筍般冒出，形成 React、Vue、Angular 三大局面。其中 React 是比較難學習的，而 Vue 則是最好上手。前端框架很多樣，但基本上都面對以下三件事：❶ 渲染局部頁面、❷ 網頁元件化，使用邏輯控制組件、❸ 處理 URL 與資料流。&#xA;Vue 可以讓 HTML、CSS 這些與畫面相關的部分與 JavaScript 分開管理，且能以資料操控畫面，整體上的效能顯得更好。&#xA;初始設置 在使用 Vue 之前，我們需要先 ❶ 安裝 Vue，接著 ❷ 創建一個新專案，然後 ❸ 啟動這個專案。&#xA;npm install -g @vue/cli //在全域環境安裝 vue create your-project-name npm run server 完成後，打開你的 code editor，進入這個專案中，會看到幾個資料夾。&#xA;資料夾詳解 public 資料夾 這個資料夾裡會有網頁的 icon 和 index.html 檔案，html 檔案主要是 Vue 預設的一些內容。通常在專案裡，叫做 public 的資料夾是放一些可以直接被外部讀取到的檔案。&#xA;src 資料夾 其中有四個部分，分別是&#xA;assets：中文是資產的意思，顧名思義就是放置靜態檔案，如 icon、圖檔、css 設定檔。 components：這個資料夾會放一些元件檔案，使用時，透過 import 引入使用。 main.</description>
    </item>
  </channel>
</rss>
