<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>event loop on 生活、學習紀錄</title>
    <link>https://jyunyi-lin.github.io/tags/event-loop/</link>
    <description>Recent content in event loop on 生活、學習紀錄</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 23 Nov 2020 21:29:07 +0800</lastBuildDate><atom:link href="https://jyunyi-lin.github.io/tags/event-loop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What Is Event Loop?</title>
      <link>https://jyunyi-lin.github.io/posts/2020/11/what-is-event-loop/</link>
      <pubDate>Mon, 23 Nov 2020 21:29:07 +0800</pubDate>
      
      <guid>https://jyunyi-lin.github.io/posts/2020/11/what-is-event-loop/</guid>
      <description>究竟什麼是 event loop？ Event loop 就字面上的意思來解釋就是「事件圈」。用我的理解來說就是事件的發生順序。但在 JavaScript 中，事件的發生順序卻與我們所以為的有那麼一點不同。而這也就是這篇筆記的主旨，讓我們來好好來了解究竟 event loop 是如何發生在 JavaScript 執行程序中的。進入正題之前，先來認識幾個有點陌生的單字。
名詞解釋 單執行緒（Single-Threaded） JavaScript 是單執行緒的程式語言，白話來說就是由上而下一行一行地執行、一次只做一件事。
堆疊區（Stack） JavaScript 引擎會將執行的程式放到堆疊區（Stack）中，代表他目前正處理到哪個段落。如下圖所示，JavaScript 引擎將任務先放到堆疊區（Stack）中，然後一行一行地執行。而碰到 return 時，就直接脫離堆疊。  圖片來源
 事件佇列（Task Queue, Callback Queue） 有一些無法預期什麼時候會被執行的操作，像是 setTimeout、event 監聽器、Ajax，在 JavaScript 中都會以非同步的方式被處理。也就是先被放到事件佇列，等到同步執行的程式碼執行完，再回過頭來處理那些被放到佇列中的任務。  圖片來源
 所以，到底什麼是 event loop？ JavaScript 在執行程式的順序是這樣的：
 將函式放到堆疊區（Stack）中 如果有非同步的處理程式，例如上述的 setTimeout、event 監聽器、Ajax，會先被放到事件佇列(Callback Queue) 在堆疊區（Stack）中的一般函式被執行 等到堆疊區（Stack）中執行完畢後，再將事件佇列(Callback Queue)中等待執行的任務丟到堆疊區（Stack）中 執行完堆疊區（Stack）中的任務後，再回到事件佇列(Callback Queue)查看是否還有任務要做  這個過程就是 event loop！ 第 4 步驟是我們下一步解題的關鍵，多閱讀幾次，放到你心中。
拆解 setTimeout 函式的謎題 用範例會更好理解，首先我們輸入：
setTimeout(function() {console.log(&#39;delay 0 sec&#39;)}, 0) console.</description>
    </item>
    
  </channel>
</rss>
