<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ORID on 生活、學習紀錄</title>
    <link>https://jyunyi-lin.github.io/tags/orid/</link>
    <description>Recent content in ORID on 生活、學習紀錄</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 23 Nov 2020 22:54:02 +0800</lastBuildDate><atom:link href="https://jyunyi-lin.github.io/tags/orid/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ALPHA Camp 學期 2-2 學習心得</title>
      <link>https://jyunyi-lin.github.io/posts/2020/11/alpha-camp-%E5%AD%B8%E6%9C%9F-2-2-%E5%AD%B8%E7%BF%92%E5%BF%83%E5%BE%97/</link>
      <pubDate>Mon, 23 Nov 2020 22:54:02 +0800</pubDate>
      
      <guid>https://jyunyi-lin.github.io/posts/2020/11/alpha-camp-%E5%AD%B8%E6%9C%9F-2-2-%E5%AD%B8%E7%BF%92%E5%BF%83%E5%BE%97/</guid>
      <description>OBJECTIVE 學期 2-1 到 2-2 之間，我認為有著飛躍性的成長。很多模糊的觀念在這學期開始變得清晰，也逐漸體會到 JavaScript 這個語言的博大精深，當然坑挖得越深，越是覺得有更多想去理解與學習的。相比於一個月前的自己，現在不僅懂得使用更多的語法，也更能掌控整體寫程式的思考脈絡，比較不容易陷入鑽牛角尖的負面情緒。在寫 code 的過程中，也逐漸培養出要求更精確的命名、排版的一致性與函式的低耦合性。
REFLECTIVE 成功總不是一蹴而就的。進步發生在每一次練習背後找資料的過程。例如遇到新的語法時，除了用教案中的例子來理解，我也會從 Google 中抓取很多資料，把自己會的語言的資料都閱讀過一遍，然後很驚訝地發現原來同一個語法在中文、英文、日文、法文中都有些微相異的解釋方式。我原本就很喜歡日常語言，在學了 JavaScript 之後，我更享受觀察人類語言與電腦語言之間的相關性。
很奇妙的是，我發現閱讀中文資料時會比起閱讀其他語言的資料更難以理解。或許跟語言的特性有關，當英文翻譯成中文時，有時候會顯得有點牽強，但當翻成同有漢字的日文時，卻又沒有這種問題，是否與語言的嚴謹性也有關聯？以上純屬個人意見。
其中我看了一個在講 functional programming 的影片，十分發人省思。裡頭提到純（Pure）與不純的函數、使用高階函數（Higher-order function）而不是用 for、while 來做迴圈、持久化數據結構（Persistent data structure）等等的概念。一個月前我大概影片一開始就直接放棄，但現在我會很有興趣地把它看過一遍又一遍，然後試著梳理出其中的脈絡。我認為這也跟對 JavaScript 有更為深入的認識有關，就像是一開始你不懂到連問問題都沒辦法，一直到你有一些基礎概念而能問出一個問題有異曲同工之妙。問問題也是一門學問。
INTERPRETIVE 無論人類的語言或電腦的語言，若要「持續學習，持續進步」就必須不斷地跳出舒適圈。我們要開口說才能培養出更好的語感，語言的最終目的是完成與其他人的溝通，這是一個絕對雙向的過程，當然閱讀亦是如此，你必須先磨練自己的寫作能力，才能看得懂更深刻晦澀的文章，而每一次練習都在跳出舒適圈。同理可證，學習 JavaScript 的目的是用來與電腦溝通，但是設計這個溝通架構的也是人，所以最終還是在與人溝通。
要是有一個 JavaScript 的語法或者觀念一直無法理解，就好比在現實社會中你不懂為什麼媽媽總是要你如何如何一樣，但若是你不試著跨過你自己的舒適圈與媽媽溝通，情況就會一直僵持下去。試著去讓自己不要陷入這種一直無法理解的負面情緒，打破這個框架去找方法更加認識它，是我認為唯一能持續成長的方法。
就像 Leonard Cohen 在 Anthem 這首歌中的一句歌詞一樣 “There is a crack in everything. That’s how the light gets in.”
DECISIONAL 培養書寫技術文章的能力是我現在想開始進行的。觀摩同學的筆記後發現，唯有自己整理過的，才真正能內化為知識。下一階段要開始學習後端的內容，想必更需要有條理的邏輯與思考力，勉勵自己能將每個章節留下一些紀錄，以供之後需要時能隨時查閱，而不會船過水無痕。</description>
    </item>
    
    <item>
      <title>ALPHA Camp 學期 2-1 學習心得</title>
      <link>https://jyunyi-lin.github.io/posts/2020/11/alpha-camp-%E5%AD%B8%E6%9C%9F-2-1-%E5%AD%B8%E7%BF%92%E5%BF%83%E5%BE%97/</link>
      <pubDate>Sun, 22 Nov 2020 14:16:53 +0800</pubDate>
      
      <guid>https://jyunyi-lin.github.io/posts/2020/11/alpha-camp-%E5%AD%B8%E6%9C%9F-2-1-%E5%AD%B8%E7%BF%92%E5%BF%83%E5%BE%97/</guid>
      <description>為什麼開始寫網頁？ 在工作中偶然有機會要製作一個網頁，當時由於經費的問題，必須自己搞定這個任務。於是就從一本厚重的 HTML、CSS 書籍開始，從學習到刻出一個靜態頁面。當時是在 wordpress 平台上操作，所以基本上不需要太多深入的技巧，頂多改動一下 CSS。不過就因為這次的經驗，讓我對「寫網頁」這件事有了興趣，後來持續自己精進，在某一次的產品計畫中提出希望能自己做出這個產品的 Brand Page。然後從伺服器開始，一直到客戶端的整個過程，使用 Google 大神的資訊漸漸把知識拼圖拼起來。後來發現有 Bootstrap 這個能夠快速拼出網頁模版的平台，一邊使用內建的功能，一邊加入自己的 CSS，終於把一個完整的品牌頁面刻出來。那時候的成就感真是像潮水湧出。
為什麼想學習 JavaScript？ 在跳進這個坑之後，發現原來這是個很深很深看不到最下面的坑。開始開啟開發者工具去看喜歡的網頁的程式碼，試著去理解他的邏輯，然後也想做出跟他一樣的互動效果。結果發現原來這都需要 JavaScript。用 CSS 或許也可以做出動畫效果，但要真正的與使用者互動，非 JavaScript 莫屬。與 HTML、CSS 不同，JavaScript 是一個程式語言，它較為複雜的邏輯概念讓我無法有效率地自己學習，但我想讓品牌網頁更有互動性、更完整，於是我開始尋找線上課程。
所以學了幾個月，有什麼感受？ 我是在學完學期 2-2 才回過頭來做這個 review，原因是當時學完 2-1 時，對 JavaScript 只有初步的了解，沒有一個宏觀、完整的認識，所以無法整理出太多內化的知識。在跑過 API、DOM 及前端使用者體驗後，從一開始覺得這是一個很難理解的程式語言，到現在開始發現他的趣味所在。原本我猜想要學會 JavaScript，大概數學、邏輯能力要很好，後來發現其實不盡然如此。當然在一開始不習慣要如何去思考它時，會顯得自己很笨拙，但跟著課程循序漸進地拆解後，才發現真正重要的，不是「有沒有解題的能力」，而是「如何去思考它運作的能力。」這再次向我說明了，邏輯是要柔軟去對待而不是用死背來應付的。你可以背很多語法，但當你沒掌握到整個撰寫程式的思考脈絡時，你會發現語法就只是語法，而不是解決問題的工具。JavaScript 真的是一門博大精深的語言，有很多可以探索的部分，當你在拆解每一個步驟時，都可以感受到設計者在 JavaScript 引擎上所做的巧思。</description>
    </item>
    
  </channel>
</rss>
