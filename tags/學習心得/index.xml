<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>學習心得 on 生活、學習紀錄</title>
    <link>https://jyunyi-lin.github.io/tags/%E5%AD%B8%E7%BF%92%E5%BF%83%E5%BE%97/</link>
    <description>Recent content in 學習心得 on 生活、學習紀錄</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Thu, 01 Apr 2021 15:29:24 +0800</lastBuildDate>
    <atom:link href="https://jyunyi-lin.github.io/tags/%E5%AD%B8%E7%BF%92%E5%BF%83%E5%BE%97/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ALPHA Camp 畢業心得</title>
      <link>https://jyunyi-lin.github.io/posts/2021/04/alpha-camp-%E7%95%A2%E6%A5%AD%E5%BF%83%E5%BE%97/</link>
      <pubDate>Thu, 01 Apr 2021 15:29:24 +0800</pubDate>
      <guid>https://jyunyi-lin.github.io/posts/2021/04/alpha-camp-%E7%95%A2%E6%A5%AD%E5%BF%83%E5%BE%97/</guid>
      <description>從 2020 年 9 月一直到現在，整整半年的時間，終於是寫畢業部落格的時機了。還記得剛開始接觸 JavaScript 時笨拙得連函式都搞不太清楚，物件跟陣列分不出個所以然的自己。一路走來真是有種浴火重生，現在才要開始的感慨。完全沒有後悔過這個選擇，因為不論上完課程後是否要轉職，過程中所得到的收穫是比這個結果還要更重要、更能影響我的。&#xA;還記得一開始寫 AC 要求的技術文章時，覺得有點麻煩之外，又想說怎麼會有人來看呢，滿心都是一個想逃避的態度。後來寫著寫著不知為何就啟動某個開關，其實根本不需要真的有人來閱讀，只要我還有在讀自己的文章，這些被記錄下的事就是有價值的。現在很感謝 AC 的這種作業形式，讓我更能反覆的反省、思考不足之處。&#xA;我想大略談談每個學期的感受，雖然之前已經有兩篇學期心得文，還是不厭煩的來總結一下。&#xA;2-1 剛開始接觸 JavaScript，即使稍微有點 HTML，CSS 的觀念，還是很難應付這個全新的東西。好像在新手村還沒辦法轉職的初心者，只能默默打怪，然後等待出頭天的時候來臨。&#xA;2-2 終於可以轉職了，進入前端世界，學習新技能：DOM 與 Ajax。學了新技能後好像發現新世界，自己居然可以靠著簡單的語法完成一個簡單的社群名單還有翻牌遊戲，讓人大開眼界。&#xA;2-3 由淺入深的後端世界。這時已經可以自己單打獨鬥，但還是會因為一時的疏忽而跑出墓碑。最讓人有成就感的就是終於可以把自己的作品跟別人分享了，部署技能 get。還學了一些護身法術，像是 git 之類的。&#xA;3 巫師的磨練。這關是要與同伴並肩作戰打敗 Simple Twitter 魔王的。俗話說的好，三個臭皮匠，勝過一個諸葛亮。在組隊加持下，即使途中遭遇無數次困難，也都能扭轉乾坤，順利過關。&#xA;大概就是這樣的感覺了。學期三作為最後一個學期，其內容之縝密、任務之精實。任務結束後的各種反思主題讓人印象深刻，就是透過這樣不斷地內化，才能打造更堅強不可摧的心靈。做好一件事，不只是表面上看起來完成，裡面也要結實纍纍，這樣才禁得起未來的困難。這是對我來說感受最深的一課。&#xA;即使課程告一段落了，但人生的旅程才正要開始，繼續學習新技能，穩扎穩打，目標不是有一天能單挑大魔王，而是能與一群夥伴一起走過一個充實的人生。</description>
    </item>
    <item>
      <title>ALPHA Camp 自學經驗回顧</title>
      <link>https://jyunyi-lin.github.io/posts/2021/01/alpha-camp-%E8%87%AA%E5%AD%B8%E7%B6%93%E9%A9%97%E5%9B%9E%E9%A1%A7/</link>
      <pubDate>Wed, 06 Jan 2021 14:37:31 +0800</pubDate>
      <guid>https://jyunyi-lin.github.io/posts/2021/01/alpha-camp-%E8%87%AA%E5%AD%B8%E7%B6%93%E9%A9%97%E5%9B%9E%E9%A1%A7/</guid>
      <description>前言 進入後端課程之後，每個禮拜都過得十分充實。由於後端是自己平常不論在工作或是私底下的學習都比較沒有涉足到的領悟，所以每一章節都是全新的體驗。每一種體驗都帶給我許多成長，而其中最讓人印象深刻的就是不斷地閱讀原文文章這件事。網路上有著許多翻譯後的前端資源，但當來到後端時，往往都需要看英文的說明或者 google，即使平常對於英文並不排斥，也自認具有良好的閱讀能力，但當一開始閱讀「技術文章」時，還是會遇到許多名詞上的不熟悉而讀得不順暢，或者是不知道怎麼使用確切的關鍵字來在 google 海中撈一根針。這篇文章集結了這個月來自我學習及使用搜尋工具的心得，希望能有所幫助。&#xA;關於學習 確立問題 找到真正的問題點，有時候是一件很傷腦筋的事。因為有時候你甚至不知道問題出在哪裡。尤其剛開始學習一個新的領域時，你必須先建構出該領域的空間，才能去感受內部的變化。所以很重要的是，在思考欲解決的問題之間，先想想遇到這個問題的過程。這種有脈絡地回溯，會讓整體的輪廓更明顯，也就更容易確立問題出在哪。&#xA;當我在思考如何將 select 選單設計成能保存使用者前一次選項時，第一次嘗試了這種思考流程。我先是使用了 Handlebars 的 Built-in Helpers 中的 #if 來試試看，結果發現不可行，於是我跳回到問題發生之前，我想解決的是如何保存選項，而保存選項同義於兩次之間的選項相等，所以我用 handlebars if equal 搜尋，在第一個 stackoverflow 的論壇就找到了答案，但為求更精密的解釋，持續查詢後找到一份有 188 種 handlebars-helpers 的資料，非常有幫助。&#xA;當問題確立了之後，尋找到的參考答案也會比較容易理解。&#xA;閱讀文件 找到了看起來可能的解答後，接著就要有效率地從一大片草地中找出埋藏寶藏的位置，而且這不是一片普通的草地，而是外國的草地。一開始覺得閱讀英文文件有些困難，但隨著掌握一些訣竅之後，其實都會如同倒吃甘蔗，越來越順。這邊就以上述 188 種 handlebars-helpers 的資料為例，來闡述我的閱讀過程。&#xA;馬上看 usage，該份文件的使用方式寫得非常清楚，也告訴你要使用時只需要載入一個主 category，其中就包含多個 helpers。 找到 equal 的同義字，也就是 comparison，看看其中有哪些是符合使用需求的。 選擇了 #is，點進去看它的 code。 藉由 code 來進一步了解用法。 上面的過程其實並沒有需要閱讀到許多文字，只有一開始在找可能解決法的發光點時讀了使用方式，之後大部分都是零星的單字，或者是看 code 來理解。這就跟觀摩同學的作業一樣，你可以選擇先模仿，懂了其中的要領後，再深入發展自己的解釋。&#xA;觀摩他人的 code 很多時候，我需要觀摩同學的作業才能找到自己的癥結點。或者，在 CodePen 上尋找好看的 UI 時，也總是觀摩網路上他人的 code。觀摩和抄襲雖然只有一線之隔，但是學習勢必得從模仿開始。重要的是，觀看他人的 code 時，理解對方為何在此處這樣寫，如此一來便能刺激自己去思考，進而激盪出更好的想法。條條大路通羅馬，每個人寫的 code 都不同，但結果可以完全相同，這也是程式語言有趣之處，它告訴我們，其實一開始這就只是一個工具，像學習開車一樣，有的人撞爛一臺車才學會；有的人一插進鑰匙就會駕駛，但結果是每個人學會了開車之後，就都能使用這個工具，而過程就成為自己的回憶。&#xA;關於課程 後端開發 後端開發使用的語言雖然還是 JavaScript，但隨著執行環境從瀏覽器到伺服器，使用的方式也有所不同，像是 DOM 之類的操作就行不通。接觸 Node.</description>
    </item>
    <item>
      <title>ALPHA Camp 學期 2-2 學習心得</title>
      <link>https://jyunyi-lin.github.io/posts/2020/11/alpha-camp-%E5%AD%B8%E6%9C%9F-2-2-%E5%AD%B8%E7%BF%92%E5%BF%83%E5%BE%97/</link>
      <pubDate>Mon, 23 Nov 2020 22:54:02 +0800</pubDate>
      <guid>https://jyunyi-lin.github.io/posts/2020/11/alpha-camp-%E5%AD%B8%E6%9C%9F-2-2-%E5%AD%B8%E7%BF%92%E5%BF%83%E5%BE%97/</guid>
      <description>OBJECTIVE 學期 2-1 到 2-2 之間，我認為有著飛躍性的成長。很多模糊的觀念在這學期開始變得清晰，也逐漸體會到 JavaScript 這個語言的博大精深，當然坑挖得越深，越是覺得有更多想去理解與學習的。相比於一個月前的自己，現在不僅懂得使用更多的語法，也更能掌控整體寫程式的思考脈絡，比較不容易陷入鑽牛角尖的負面情緒。在寫 code 的過程中，也逐漸培養出要求更精確的命名、排版的一致性與函式的低耦合性。&#xA;REFLECTIVE 成功總不是一蹴而就的。進步發生在每一次練習背後找資料的過程。例如遇到新的語法時，除了用教案中的例子來理解，我也會從 Google 中抓取很多資料，把自己會的語言的資料都閱讀過一遍，然後很驚訝地發現原來同一個語法在中文、英文、日文、法文中都有些微相異的解釋方式。我原本就很喜歡日常語言，在學了 JavaScript 之後，我更享受觀察人類語言與電腦語言之間的相關性。&#xA;很奇妙的是，我發現閱讀中文資料時會比起閱讀其他語言的資料更難以理解。或許跟語言的特性有關，當英文翻譯成中文時，有時候會顯得有點牽強，但當翻成同有漢字的日文時，卻又沒有這種問題，是否與語言的嚴謹性也有關聯？以上純屬個人意見。&#xA;其中我看了一個在講 functional programming 的影片，十分發人省思。裡頭提到純（Pure）與不純的函數、使用高階函數（Higher-order function）而不是用 for、while 來做迴圈、持久化數據結構（Persistent data structure）等等的概念。一個月前我大概影片一開始就直接放棄，但現在我會很有興趣地把它看過一遍又一遍，然後試著梳理出其中的脈絡。我認為這也跟對 JavaScript 有更為深入的認識有關，就像是一開始你不懂到連問問題都沒辦法，一直到你有一些基礎概念而能問出一個問題有異曲同工之妙。問問題也是一門學問。&#xA;INTERPRETIVE 無論人類的語言或電腦的語言，若要「持續學習，持續進步」就必須不斷地跳出舒適圈。我們要開口說才能培養出更好的語感，語言的最終目的是完成與其他人的溝通，這是一個絕對雙向的過程，當然閱讀亦是如此，你必須先磨練自己的寫作能力，才能看得懂更深刻晦澀的文章，而每一次練習都在跳出舒適圈。同理可證，學習 JavaScript 的目的是用來與電腦溝通，但是設計這個溝通架構的也是人，所以最終還是在與人溝通。&#xA;要是有一個 JavaScript 的語法或者觀念一直無法理解，就好比在現實社會中你不懂為什麼媽媽總是要你如何如何一樣，但若是你不試著跨過你自己的舒適圈與媽媽溝通，情況就會一直僵持下去。試著去讓自己不要陷入這種一直無法理解的負面情緒，打破這個框架去找方法更加認識它，是我認為唯一能持續成長的方法。&#xA;就像 Leonard Cohen 在 Anthem 這首歌中的一句歌詞一樣 “There is a crack in everything. That’s how the light gets in.”&#xA;DECISIONAL 培養書寫技術文章的能力是我現在想開始進行的。觀摩同學的筆記後發現，唯有自己整理過的，才真正能內化為知識。下一階段要開始學習後端的內容，想必更需要有條理的邏輯與思考力，勉勵自己能將每個章節留下一些紀錄，以供之後需要時能隨時查閱，而不會船過水無痕。</description>
    </item>
    <item>
      <title>ALPHA Camp 學期 2-1 學習心得</title>
      <link>https://jyunyi-lin.github.io/posts/2020/11/alpha-camp-%E5%AD%B8%E6%9C%9F-2-1-%E5%AD%B8%E7%BF%92%E5%BF%83%E5%BE%97/</link>
      <pubDate>Sun, 22 Nov 2020 14:16:53 +0800</pubDate>
      <guid>https://jyunyi-lin.github.io/posts/2020/11/alpha-camp-%E5%AD%B8%E6%9C%9F-2-1-%E5%AD%B8%E7%BF%92%E5%BF%83%E5%BE%97/</guid>
      <description>為什麼開始寫網頁？ 在工作中偶然有機會要製作一個網頁，當時由於經費的問題，必須自己搞定這個任務。於是就從一本厚重的 HTML、CSS 書籍開始，從學習到刻出一個靜態頁面。當時是在 wordpress 平台上操作，所以基本上不需要太多深入的技巧，頂多改動一下 CSS。不過就因為這次的經驗，讓我對「寫網頁」這件事有了興趣，後來持續自己精進，在某一次的產品計畫中提出希望能自己做出這個產品的 Brand Page。然後從伺服器開始，一直到客戶端的整個過程，使用 Google 大神的資訊漸漸把知識拼圖拼起來。後來發現有 Bootstrap 這個能夠快速拼出網頁模版的平台，一邊使用內建的功能，一邊加入自己的 CSS，終於把一個完整的品牌頁面刻出來。那時候的成就感真是像潮水湧出。&#xA;為什麼想學習 JavaScript？ 在跳進這個坑之後，發現原來這是個很深很深看不到最下面的坑。開始開啟開發者工具去看喜歡的網頁的程式碼，試著去理解他的邏輯，然後也想做出跟他一樣的互動效果。結果發現原來這都需要 JavaScript。用 CSS 或許也可以做出動畫效果，但要真正的與使用者互動，非 JavaScript 莫屬。與 HTML、CSS 不同，JavaScript 是一個程式語言，它較為複雜的邏輯概念讓我無法有效率地自己學習，但我想讓品牌網頁更有互動性、更完整，於是我開始尋找線上課程。&#xA;所以學了幾個月，有什麼感受？ 我是在學完學期 2-2 才回過頭來做這個 review，原因是當時學完 2-1 時，對 JavaScript 只有初步的了解，沒有一個宏觀、完整的認識，所以無法整理出太多內化的知識。在跑過 API、DOM 及前端使用者體驗後，從一開始覺得這是一個很難理解的程式語言，到現在開始發現他的趣味所在。原本我猜想要學會 JavaScript，大概數學、邏輯能力要很好，後來發現其實不盡然如此。當然在一開始不習慣要如何去思考它時，會顯得自己很笨拙，但跟著課程循序漸進地拆解後，才發現真正重要的，不是「有沒有解題的能力」，而是「如何去思考它運作的能力。」這再次向我說明了，邏輯是要柔軟去對待而不是用死背來應付的。你可以背很多語法，但當你沒掌握到整個撰寫程式的思考脈絡時，你會發現語法就只是語法，而不是解決問題的工具。JavaScript 真的是一門博大精深的語言，有很多可以探索的部分，當你在拆解每一個步驟時，都可以感受到設計者在 JavaScript 引擎上所做的巧思。</description>
    </item>
  </channel>
</rss>
